// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return options;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for android - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions options = FirebaseOptions(
    apiKey: bool.hasEnvironment('FB_API_KEY') ? String.fromEnvironment('FB_API_KEY') : 'YOUR_FB_API_KEY',
    appId: bool.hasEnvironment('FB_APP_ID') ? String.fromEnvironment('FB_APP_ID') : 'YOUR_FB_APP_ID',
    messagingSenderId: bool.hasEnvironment('FB_MSG_SENDER_ID') ? String.fromEnvironment('FB_MSG_SENDER_ID') : 'YOUR_FB_MSG_SENDER_ID',
    projectId: bool.hasEnvironment('FB_PROJECT_ID') ? String.fromEnvironment('FB_PROJECT_ID') : 'YOUR_FB_PROJECT_ID',
    authDomain: bool.hasEnvironment('FB_AUTH_DOMAIN') ? String.fromEnvironment('FB_AUTH_DOMAIN') : 'YOUR_FB_AUTH_DOMAIN',
    storageBucket: bool.hasEnvironment('FB_STORAGE_BUCKET') ? String.fromEnvironment('FB_STORAGE_BUCKET') : 'YOUR_FB_STORAGE_BUCKET',
    measurementId: bool.hasEnvironment('FB_MEASUREMENT_ID') ? String.fromEnvironment('FB_MEASUREMENT_ID') : 'YOUR_FB_MEASUREMENT_ID',
  );
}
